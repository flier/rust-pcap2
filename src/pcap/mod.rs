use std::borrow::Cow;
use std::time::SystemTime;

pub use self::header::{
    Header as FileHeader, LinkType, Magic, WriteHeaderExt, DEFAULT_VERSION_MAJOR,
    DEFAULT_VERSION_MINOR,
};
pub use self::packet::{
    AsEndianness, Header as PacketHeader, Packet as RawPacket, ReadPacketExt, WritePacket,
    WritePacketExt,
};
pub use self::read::{mmap, open, parse, read, ParsePackets, ReadPackets, Reader};
pub use self::write::{create, Writer};

mod header;
mod packet;
mod read;
mod write;

pub struct Packet<'a> {
    pub timestamp: SystemTime,
    pub actual_length: usize,
    pub payload: Cow<'a, [u8]>,
}

impl<'a> Packet<'a> {
    pub fn new(payload: &'a [u8]) -> Self {
        Self::with_timestamp(payload, SystemTime::now())
    }

    pub fn with_timestamp(payload: &'a [u8], timestamp: SystemTime) -> Packet<'a> {
        Packet {
            timestamp,
            actual_length: payload.len(),
            payload: payload.into(),
        }
    }
}

#[cfg(test)]
pub mod tests {
    use super::*;

    lazy_static! {
        pub static ref PACKET_BE_US: Vec<u8> = vec![
            0xa1, 0xb2, 0xc3, 0xd4, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x65, 0x56, 0x50, 0x6e, 0x1a,
            0x18, 0x2b, 0x0a, 0xd0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3c, 0x44, 0x41,
            0x54, 0x41,
        ];
        pub static ref PACKET_BE_NS: Vec<u8> = vec![
            0xa1, 0xb2, 0x3c, 0x4d, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x65, 0x56, 0x50, 0x6e, 0x1a,
            0x18, 0x2b, 0x0a, 0xd0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3c, 0x44, 0x41,
            0x54, 0x41,
        ];
        pub static ref PACKET_LE_US: Vec<u8> = vec![
            0xd4, 0xc3, 0xb2, 0xa1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x1a, 0x6e, 0x50, 0x56,
            0xd0, 0x0a, 0x2b, 0x18, 0x04, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x44, 0x41,
            0x54, 0x41,
        ];
        pub static ref PACKET_LE_NS: Vec<u8> = vec![
            0x4d, 0x3c, 0xb2, 0xa1, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x1a, 0x6e, 0x50, 0x56,
            0xd0, 0x0a, 0x2b, 0x18, 0x04, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x44, 0x41,
            0x54, 0x41,
        ];
        pub static ref PACKETS: Vec<(&'static [u8], Magic)> = vec![
            (&PACKET_BE_US, Magic::ByteSwap),
            (&PACKET_BE_NS, Magic::NanoSecondResolutionByteSwap),
            (&PACKET_LE_US, Magic::Normal),
            (&PACKET_LE_NS, Magic::NanoSecondResolution),
        ];
    }
}
